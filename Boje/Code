```

/*
 Arduino --> ThingSpeak Channel via MKR1000 Wi-Fi
 
 The ThingSpeak Client sketch is designed for the Arduino MKR1000 Wi-Fi.
 This sketch writes analog and Wi-Fi signal strength data to a ThingSpeak channel
 using the ThingSpeak API (https://www.mathworks.com/help/thingspeak).
 Arduino Requirements:
 
   * Arduino MKR1000 with ATMEL WINC1500 Wi-Fi module
   * Arduino 1.6.5+ IDE
 
 ThingSpeak Setup:
 
   * Sign Up for New User Account - https://thingspeak.com/users/sign_up
   * Create a new Channel by selecting Channels, My Channels, and then New Channel
   * Enable two fields
   * Note the Write API Key and Channel ID
   Tutorial: http://community.thingspeak.com/tutorials/arduino/using-the-arduino-mkr1000-with-thingspeak/
 
 Setup Wi-Fi
  * Enter SSID
  * Enter Password
   
 Created: May 7, 2016 by Hans Scharler (http://www.nothans.com)
 
 Additional Credits:
 Example sketches from Arduino team, Tom Igoe, and Federico Vanzati

Die Sensoren:
A1 = TDS-Leitfaegkeit  
A2 = Ph Sensor
A3 = Sauerstoff
A5 = Temperatur---todo
A6 = Trübung-turbidity

ToDo TDS Sensor auskommentieren und schauen, obs der Stoerenfried ist
 
 
*/

//Libarys
#include <SPI.h>
#include <WiFi101.h>
#include <OneWire.h>


//Variabeln für die Sensoren:
//Truebungssensor aka Turbidity Sensor
int truebung = A6;
int valtruebung = 0;

//ph sensor
#define SensorPin 2          //pH meter Analog output to Arduino Analog Input 2
float phValue;
unsigned long int avgValue;  //Store the average value of the sensor feedback
float b;
int buf[10],temp;

//TDS Sensor
#define TdsSensorPin A1 //Total disoved solids
#define VREF 5.0      // analog reference voltage(Volt) of the ADC
#define SCOUNT  30           // sum of sample point
int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0,copyIndex = 0;
float averageVoltage = 0,tdsValue = 0,temperaturetds = 25;
float temperature;

//sauerstoffsensor
int analogPin = A3; // Sauerstoffpotentiometer wiper (middle terminal) connected to analog pin 3   
float percent;
int valdo = 0;  // Sauerstoff variable to store the value read
int calibration = 137; //Kalobrierung Sauerstoff

//Temperatur-Sensor
int DS18S20_Pin = A5; //DS18S20 Signal 
OneWire ds(DS18S20_Pin);  // OneWire Konstruktor

//WiFi Settings 
char ssid[] = "iPhone"; //  your network SSID (name)
char pass[] = "12345678"; // your network password

int status = WL_IDLE_STATUS;

// Initialize the Wifi client library
WiFiClient client;

// ThingSpeak Settings
char server[] = "api.thingspeak.com";
//String writeAPIKey = "1CXFTFXTC340A2I4";
String writeAPIKey = "82RJIQ68WF2VW2N7";

unsigned long lastConnectionTime = 0; // track the last connection time
const unsigned long postingInterval = 30L * 1000L; // post data every 20 seconds

void setup() {
  // attempt to connect to Wifi network
  while ( status != WL_CONNECTED) {
    // Connect to WPA/WPA2 Wi-Fi network
    status = WiFi.begin(ssid, pass);

    // wait 10 seconds for connection
    delay(10000);
  }
//Sensor 
  pinMode(TdsSensorPin,INPUT);
  pinMode(6,OUTPUT);  //blinkt wenn ph Messung erfolgt
}

void loop() {

  //Wifi
  // if interval time has passed since the last connection,
  // then connect again and send data
  if (millis() - lastConnectionTime > postingInterval) {
    httpRequest();
  }

//Sensoren


//ph Sensor
for(int i=0;i<10;i++)       //Get 10 sample value from the sensor for smooth the value
  { 
    buf[i]=analogRead(SensorPin);
    delay(10);
  }
  for(int i=0;i<9;i++)        //sort the analog from small to large
  {
    for(int j=i+1;j<10;j++)
    {
      if(buf[i]>buf[j])
      {
        temp=buf[i];
        buf[i]=buf[j];
        buf[j]=temp;
      }
    }
  }
  avgValue=0;
  for(int i=2;i<8;i++)                      //take the average value of 6 center sample
    avgValue+=buf[i];
   phValue=(float)avgValue*5.0/1024/6; //convert the analog into millivolt
  phValue=3.5*phValue;                      //convert the millivolt into pH value
  Serial.print("    pH:");  
  Serial.print(phValue,2);
  Serial.println(" ");
  digitalWrite(13, HIGH);       
  delay(800);
  digitalWrite(13, LOW);    

 //Sauerstoff und temperatur und turbidity
  valdo = analogRead(analogPin);  // read the input pin Sauerstoff
  //float temperature = getTemp();
  valtruebung = analogRead(truebung);
  percent = valdo*100/calibration; //Sauerstoff
  Serial.println("Sauerstoff in %:"); //Sauerstoff
  Serial.println(percent); //Sauerstoff
  Serial.println("temperatur:");
  Serial.println(temperature);
  Serial.println("truebung:");
  Serial.println(valtruebung);
         
}

//Funktion for TDS Sensor
int getMedianNum(int bArray[], int iFilterLen) 
{
      int bTab[iFilterLen];
      for (byte i = 0; i<iFilterLen; i++)
      bTab[i] = bArray[i];
      int i, j, bTemp;
      for (j = 0; j < iFilterLen - 1; j++) 
      {
      for (i = 0; i < iFilterLen - j - 1; i++) 
          {
        if (bTab[i] > bTab[i + 1]) 
            {
        bTemp = bTab[i];
            bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
         }
      }
      }
      if ((iFilterLen & 1) > 0)
    bTemp = bTab[(iFilterLen - 1) / 2];
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
      return bTemp;
}

//funktion für Temperatursensor
float getTemp(){
  //returns the temperature from one DS18S20 in DEG Celsius
  byte data[12];
  byte addr[8];
  if ( !ds.search(addr)) {
      //no more sensors on chain, reset search
      ds.reset_search();
      return -1000;
  }

  if ( OneWire::crc8( addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return -1000;
  }

  if ( addr[0] != 0x10 && addr[0] != 0x28) {
      Serial.print("Device is not recognized");
      return -1000;
      }

  ds.reset();
  ds.select(addr);
  ds.write(0x44,1); // start conversion, with parasite power on at the end
  byte present = ds.reset();
  ds.select(addr);
  ds.write(0xBE); // Read Scratchpad
  for (int i = 0; i < 9; i++) { // we need 9 bytes
    data[i] = ds.read();
  }
  ds.reset_search();
   byte MSB = data[1];
  byte LSB = data[0];
  float tempRead = ((MSB << 8) | LSB); //using two's compliment
  float TemperatureSum = tempRead / 16;
  return TemperatureSum;
}

//Funktion zum Senden der Daten
void httpRequest() {
  
  //int sensorValue1 = TDSout(); //TDS
  int sensorValue2 = phValue; //ph
  int sensorValue3 = percent; //Sauerstoff
  int sensorValue4 = getTemp();
  //float temperature = getTemp();
  int sensorValue5 = valtruebung; //trübung
  
  // create data string to send to ThingSpeak
  String data = String("&field2=" + String(sensorValue2, DEC) + "&field3=" + String(sensorValue3, DEC) + "&field4=" + String(sensorValue4, DEC) + "&field5=" + String(sensorValue5, DEC)); 
  Serial.print("Datenpaket fertig");
  // close any connection before sending a new request
  //client.stop();

  // POST data to ThingSpeak
  if (client.connect(server, 80)) {
    client.println("POST /update HTTP/1.1");
    client.println("Host: api.thingspeak.com");
    client.println("Connection: close");
    client.println("User-Agent: ArduinoWiFi/1.1");
    client.println("X-THINGSPEAKAPIKEY: "+writeAPIKey);
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.print(data.length());
    client.print("\n\n");
    client.print(data);
Serial.print("gesendet");
    // note the last connection time
    lastConnectionTime = millis();
  }
} 

//Funktion für den Tds Sensor
  float TDSout(){
    static unsigned long analogSampleTimepoint = millis();
   if(millis()-analogSampleTimepoint > 40U)     //every 40 milliseconds,read the analog value from the ADC
   {
     analogSampleTimepoint = millis();
     analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);    //read the analog value and store into the buffer
     analogBufferIndex++;
     if(analogBufferIndex == SCOUNT) 
         analogBufferIndex = 0;
   }   
   static unsigned long printTimepoint = millis();
   if(millis()-printTimepoint > 800U)
   {
      printTimepoint = millis();
      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)
        analogBufferTemp[copyIndex]= analogBuffer[copyIndex];
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / 1024.0; // read the analog value more stable by the median filtering algorithm, and convert to voltage value
      float compensationCoefficient=1.0+0.02*(temperaturetds-25.0);    //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
      float compensationVolatge=averageVoltage/compensationCoefficient;  //temperature compensation
      tdsValue=(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
      Serial.print("TDS Value:");
      Serial.print(tdsValue,0);
      Serial.println("ppm");
   }


    return tdsValue;
  }
```  
